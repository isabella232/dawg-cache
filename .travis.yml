language: node_js

sudo: false

# enable c++11/14 builds
addons:
  apt:
    sources: [ 'ubuntu-toolchain-r-test' ]
    packages: [ 'libstdc++-4.9-dev' ]

install:
  # set up the environment by installing mason and clang++
  - ./scripts/setup.sh --config local.env
  # put mason and clang++ on PATH
  - source local.env
  - node -v
  - which node
  - clang++ -v
  - which clang++
  - make ${BUILDTYPE}

# *Here we run tests*
# We prefer running tests in the 'before_script' section rather than 'script' to ensure fast failure.
# Be aware that if you use the 'script' section it will continue running all commands in the section even if one line fails.
# This is documented at https://docs.travis-ci.com/user/customizing-the-build#Breaking-the-Build
# We don't want this behavior because otherwise we might risk publishing builds when the tests did not pass.
# For this reason, we disable the 'script' section below, since we prefer using 'before_script'.
before_script:
  - echo "before_script"
  - npm test
  # after successful tests, publish binaries if specified in commit message
  - ./scripts/publish.sh --toolset=${TOOLSET:-} --debug=$([ "${BUILDTYPE}" == 'debug' ] && echo "true" || echo "false")

# We set 'script' here to an empty array to prevent this section from automatically running 'npm test'
# The reason we do this is mentioned above in the comment about the 'before_script' stage.
# For reference, the default travis behavior which we override comes from https://github.com/travis-ci/travis-build/blob/e5a45cbf49e0d9e27398e76e5f25dd7706feb6aa/lib/travis/build/script/node_js.rb#L62-L69.
script: []

# the matrix allows you to specify different operating systems and environments to 
# run your tests and build binaries
matrix:
  include:
    # Clang format build
    - os: linux
      env: BUILDTYPE=debug
      node_js: 4
      # Overrides `install` to avoid initializing clang toolchain
      install:
        # First run the clang-tidy target
        # This target does not currently return non-zero when problems
        # are fixed, but rather it fixes automatically. Changed files
        # will be detected by the format target and will trigger an error
        - make tidy
        - echo "after tidy"
        # Now we run the clang-format script. Any code formatting changes
        # will trigger the build to fail (idea here is to get us to pay attention
        # and get in the habit of running these locally before committing)
        - make format
      # Overrides `script`, no need to run tests
      before_script: